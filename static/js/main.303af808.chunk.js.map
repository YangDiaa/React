{"version":3,"sources":["ShowTime.js","todolist/Todoinput.js","todolist/Todoing.js","todolist/Todolist.js","index.js"],"names":["Component","Todoinput","handleInput","e","keyCode","props","add","target","value","handleChange","setState","name","parseInt","bind","state","a","b","c","console","log","this","refs","className","onChange","onKeyDown","type","ref","inp","onClick","Todoing","todo","map","item","index","key","del","defaultProps","Todolist","addItem","data","delItem","splice","ReactDOM","render","document","getElementById"],"mappings":"8QACuBA,Y,qBCCFC,E,YACjB,aAAc,IAAD,8BACT,+CAQJC,YAAc,SAACC,GAEM,KAAdA,EAAEC,SACD,EAAKC,MAAMC,IAAIH,EAAEI,OAAOC,QAZnB,EAebC,aAAe,SAACN,GACZ,EAAKO,SAAL,eACKP,EAAEI,OAAOI,KAAOC,SAA0B,KAAjBT,EAAEI,OAAOC,MAAW,EAAEL,EAAEI,OAAOC,UAf7D,EAAKN,YAAc,EAAKA,YAAYW,KAAjB,gBACnB,EAAKC,MAAO,CACRC,EAAE,GACFC,EAAE,GACFC,EAAE,IANG,E,iFAqBTC,QAAQC,IAAIC,KAAKC,KAAKN,K,+BAGhB,IAAD,OACL,OACI,yBAAKO,UAAWF,KAAKN,MAAME,EAAEI,KAAKN,MAAMG,EAAE,GAAG,MAAM,IAI/C,2BAAON,KAAK,IAAIY,SAAUH,KAAKX,aAAcD,MAAOY,KAAKN,MAAMC,EAAGS,UAAWJ,KAAKlB,YAAauB,KAAK,SAJxG,IAMI,2BAAOd,KAAK,IAAIY,SAAUH,KAAKX,aAAcD,MAAOY,KAAKN,MAAME,EAAGQ,UAAWJ,KAAKlB,YAAauB,KAAK,SANxG,IAQI,2BAAOd,KAAK,IAAIY,SAAUH,KAAKX,aAAcD,MAAOY,KAAKN,MAAMG,EAAGO,UAAWJ,KAAKlB,YAAauB,KAAK,SARxG,IAUI,2BAAIL,KAAKN,MAAMC,EAAEK,KAAKN,MAAME,EAAEI,KAAKN,MAAMG,GAEzC,2BAAOS,IAAK,SAACC,GAAO,EAAKA,IAAIA,GAAMF,KAAK,SACxC,4BAAQG,QAAS,WAAKV,QAAQC,IAAI,EAAKQ,OAAvC,qB,GAxCuB3B,aCClB6B,E,iLAIP,IAAD,OACAC,EAAQV,KAAKf,MAAbyB,KACL,OACI,4BAEIA,EAAKC,KAAI,SAACC,EAAKC,GAAN,OACL,wBAAIC,IAAKD,GACJD,EADL,MACa,4BAAQJ,QAAS,SAACzB,GAAD,OAAK,EAAKE,MAAM8B,IAAIF,EAAM9B,KAA3C,yB,GAXIH,aAwBrC6B,EAAQO,aAAe,CACnBN,KAAM,CAAC,EAAE,EAAE,EAAE,EAAE,I,UCxBEO,E,YACjB,aAAc,IAAD,8BACT,+CAKJC,QAAU,SAACC,GACP,EAAK7B,SAAS,CACVoB,KAAK,GAAD,mBAAK,EAAKhB,MAAMgB,MAAhB,CAAqBS,MAE7BrB,QAAQC,IAAI,EAAKL,MAAMgB,OAVd,EAYbU,QAAU,SAACP,EAAM9B,GACbe,QAAQC,IAAIhB,GAeZ,IAAI2B,EAAI,YAAM,EAAKhB,MAAMgB,MACzBA,EAAKW,OAAOR,EAAM,GAElB,EAAKvB,SAAS,CACVoB,KAAKA,KA9BT,EAAKhB,MAAQ,CACTgB,KAAK,CAAC,EAAE,EAAE,IAHL,E,sEAoCT,OACI,6BACI,kBAAC,EAAD,CAAWxB,IAAKc,KAAKkB,UACrB,kBAAC,EAAD,CAASH,IAAKf,KAAKoB,QAASV,KAAMV,KAAKN,MAAMgB,Y,GAxCvB9B,aCuLtC0C,IAASC,OACL,kBAAC,EAAD,MAAYC,SAASC,eAAe,W","file":"static/js/main.303af808.chunk.js","sourcesContent":["import React,{Fragment,Component} from 'react';\r\nclass ShowTime extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            time: new Date().toLocaleString(),\r\n            a: 100,\r\n            b: 200\r\n        }\r\n        console.log('constructor')\r\n        setTimeout(()=>{\r\n            this.setState({\r\n                time: new Date().toLocaleString()\r\n            })\r\n        },1000)\r\n    }\r\n    shouldComponentUpdate(){\r\n        if(this.state.a>10){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    componentDidUpdate(preProps,preState,data){\r\n        console.log('didupdate');\r\n        console.log(preState)\r\n        console.log(this.state.time)\r\n    }\r\n    getSnapshotBeforeUpdate(){\r\n        console.log('getSnapshot');\r\n        return {name: this.state.a}\r\n    }\r\n    componentDidMount(){\r\n        console.log('didmount');\r\n    }\r\n    render(){\r\n        console.log('render');\r\n        var {name,age} = this.props;\r\n        return (\r\n            <Fragment>\r\n                {/* 条件渲染 */}\r\n                {name.length>5?<div>姓名：{name}</div>:''}\r\n                {name.length>5&&<div>姓名：{name}</div>}\r\n                <div>{this.state.time}</div>\r\n                {/* 循环渲染 */}\r\n                <div>\r\n                    {\r\n                        age.map((item,index)=>{\r\n                            if(index%2 === 0){\r\n                                return <p key={index}>{item}</p>\r\n                            }\r\n                        })\r\n                    }\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n//默认导出，只能导出一次，被引入时可以重命名\r\nexport default ShowTime;\r\n//命名导出，可以导出多个，被引入时与导出的名一致\r\n// export {ShowTime};\r\n// export const num = 100;\r\n//导出变量，常量，函数","import React, { Component } from 'react'\r\n\r\nexport default class Todoinput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.handleInput = this.handleInput.bind(this);\r\n        this.state ={\r\n            a:\"\",\r\n            b:\"\",\r\n            c:\"\"\r\n        }\r\n    }\r\n    handleInput = (e)=>{\r\n        //绑定this，事件处理函数写成箭头函数，或者用bind\r\n        if(e.keyCode === 13){\r\n            this.props.add(e.target.value);\r\n        }\r\n    }\r\n    handleChange = (e)=>{\r\n        this.setState({\r\n            [e.target.name]: parseInt(e.target.value===\"\"?0:e.target.value)\r\n        })\r\n    }\r\n    componentDidMount(){\r\n        console.log(this.refs.a);\r\n        //this.refs.a.focus();\r\n    }\r\n    render() {\r\n        return (\r\n            <div className={this.state.b+this.state.c>10?'box':''}>\r\n                {/* <input onKeyDown={this.handleInput} type=\"text\"/> */}\r\n                {/* <input onChange={this.handleChange} value={this.state.inputValue} onKeyDown={this.handleInput} type=\"text\"/>\r\n                <input onClick={()=>{console.log()}}/> */}\r\n                <input name=\"a\" onChange={this.handleChange} value={this.state.a} onKeyDown={this.handleInput} type=\"text\"/>\r\n                +\r\n                <input name=\"b\" onChange={this.handleChange} value={this.state.b} onKeyDown={this.handleInput} type=\"text\"/>\r\n                +\r\n                <input name=\"c\" onChange={this.handleChange} value={this.state.c} onKeyDown={this.handleInput} type=\"text\"/>\r\n                =\r\n                <p>{this.state.a+this.state.b+this.state.c}</p>\r\n                {/* 非受控组件 */}\r\n                <input ref={(inp)=>{this.inp=inp}} type=\"text\"/>\r\n                <button onClick={()=>{console.log(this.inp)}}>提交</button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class Todoing extends Component {\r\n    // delItem = (index)=>{\r\n    //     this.props.del(index);\r\n    // }\r\n    render() {\r\n        var {todo} = this.props;\r\n        return (\r\n            <ul>{\r\n                //this.props.todo\r\n                todo.map((item,index)=>\r\n                    <li key={index}>\r\n                        {item}---<button onClick={(e)=>this.props.del(index,e)}>删除</button>\r\n                        {/* {item}---<button onClick={this.delItem.bind(index)}>删除</button> */}\r\n                    </li>\r\n                )\r\n            }\r\n            </ul>\r\n        )\r\n    }\r\n}\r\nTodoing.propTypes = {\r\n    todo: PropTypes.array,\r\n    del: PropTypes.func\r\n}\r\nTodoing.defaultProps = {\r\n    todo: [1,2,3,4,5]\r\n}","import React, { Component } from 'react'\r\nimport Todoinput from \"./Todoinput\"\r\nimport Todoing from \"./Todoing\"\r\nimport \"./todo.css\"\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            todo:[1,2,3]\r\n        }\r\n    }\r\n    addItem = (data)=>{\r\n        this.setState({\r\n            todo:[...this.state.todo,data]\r\n        });\r\n        console.log(this.state.todo);\r\n    }\r\n    delItem = (index,e)=>{\r\n        console.log(e);\r\n        //深拷贝\\浅拷贝\r\n        // var obj ={a:2000,b:[1,2,3],};\r\n        // var obj1={c:300};\r\n        // //var o = {...obj};\r\n        // // var o = JSON.parse(JSON.stringify(obj));\r\n        // var o = Object.assign(obj,obj1);\r\n        // o.b[0]=200;\r\n        // console.log(obj==o);\r\n        // Object.keys(obj).forEach((item) => {\r\n        //     console.log(item);\r\n        //     console.log(obj[item]);\r\n        // })\r\n\r\n        //1.不能直接改变或处理state,通过setState实现\r\n        let todo =[...this.state.todo];\r\n        todo.splice(index,1);\r\n        //2.setState是异步执行\r\n        this.setState({\r\n            todo:todo\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Todoinput add={this.addItem}/>\r\n                <Todoing del={this.delItem} todo={this.state.todo}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React,{Fragment}  from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./index.css\";\nimport ShowTime from \"./ShowTime\"\nimport Todolist from \"./todolist/Todolist\"\n\nvar str = 'react';\n// var ele = <h1 class=\"tit\">hello{str}</h1>;\n// ReactDOM.render(ele, document.getElementById('root'));\n\n//函数声明组件\n//显示当前系统时间\n// function ShowTime(props){\n//     console.log(props);\n//     /*\n//     return (<div>\n//                 <div>{props.name}</div>\n//                 <div>\n//                     {new Date().toLocaleString()}\n//                 </div>\n//             </div>\n//         )\n//     */\n//    /*\n//     return (<Fragment>\n//                 <div>{props.name}{props.age}</div>\n//                 <div>\n//                     {new Date().toLocaleString()}\n//                 </div>\n//             </Fragment>\n//         )\n//     */\n// }\n\n//类定义组件\n\n// class ShowTime extends React.Component{\n//     constructor(){\n//         super();\n//         this.state = {\n//             time: new Date().toLocaleString(),\n//             a:100,\n//             b:200\n//         }\n//         setInterval(()=>{\n//             this.setState({time: new Date().toLocaleString()})\n//         },1000)\n//     }\n//     render(){\n//         var {name,age} = this.props;\n//         return (\n//             <Fragment>\n//                 {/* 条件渲染 */}\n//                 {name.length>5?<div>姓名：{name}</div>:\"\"}\n//                 {name.length>5&&<div>姓名：{name}</div>}\n//                 <div>时间： {this.state.time}</div>\n//                 {/* <div>姓名：{name}</div> */}\n//                 {/* 循环渲染 */}\n//                 <div>\n//                     {\n//                         age.map((item,index)=>{\n//                             if(index%2 ===0 ){\n//                                 return <p key={index}>{item}</p>\n//                             }\n//                         })\n//                     }\n//                 </div>   \n//             </Fragment>\n//         ) \n//     }\n\n// }\n\n//组件交互\n//父组件----->  子组件：调用子组件时添加属性，子组件通过props拿到所传递的数据\n//子组件----->  父组件：\n\n//var num = 100;\n// var num=[1,2,3,4,5];\n// ReactDOM.render(<ShowTime age={num} name=\"zhang\"/>,document.getElementById(\"root\"));\n// function showTime(){\n//     var ele = <div>{new Date().toLocaleString()}</div>;\n//     ReactDOM.render(\n//         ele, \n//         document.querySelector('#root')\n//     );\n// }\n// showTime();\n// setInterval(showTime,1000);\n\n\n//自己封装render函数\nvar obj = {\n    type: \"div\",\n    props:{//属性\n        id:\"box\",\n        className: \"box\",\n        children:[\"hello\",\n                \"react\",{\n                    type: \"h1\",\n                    props:{//属性\n                        id:\"tit\",\n                        className: \"tit\",\n                        children:[\"title\",\"react\"]\n                    }  \n                }\n        ]\n    }\n}\n// var ele = React.createElement(\"h1\",{id:\"tit\",className:\"tit\"},\n//             'hello',\n//             React.createElement(\"p\",{id:\"tit\",className:\"tit\"})\n// );\n\nfunction render(obj,container){\n    var {type,props} = obj;\n    //文档碎片\n    var fragment = document.createDocumentFragment();\n    var ele = document.createElement(type);\n    for(var item in props){\n        if (item === 'class'){\n            ele.className = props[item];\n        }\n        else if(item === \"children\"){\n            for(var i =0; i<props.children.length;i++){\n                //ele.innerHTML += props.children[i];\n                if(typeof props.children[i] == \"object\"){\n                    render(props.children[i],ele);\n                }\n                else{\n                    var txt = document.createTextNode(props.children[i]);\n                    ele.appendChild(txt);\n                }\n            }\n            \n        }else{\n            ele[item] = props[item];\n        }\n    }\n    fragment.appendChild(ele);\n    container.appendChild(fragment);\n}\n//render(obj,document.getElementById('root'));\n\n//页面渲染过程\n//请求HTML页面，浏览器HTML解析器解析html文件，生成DOM\n//link引入css文件，css解析器解析CSS，生成CSS对象模型，CSSOM和DOM tree结合生成一个render tree\n\n//页面回流 (重排reflow)  DOM结构变化，内容变化，大小，位置\n//页面重绘 (repaint)    颜色的变化（背景色，字体颜色，边框颜色）\n\n/*\n1.先用变量进行DOM处理，最后一次渲染\nconsole.time(\"time\");\nvar div = document.getElementById(\"root\");\nvar str=\"\";\nfor(var i =0 ;i<1000;i++){\n    str += \"<p>\"+i+\"</p>\";\n}\ndiv.innerHTML = str;\nconsole.timeEnd(\"time\")\n*/\n\n/*\n2.对于样式处理\nvar div = document.getElementById(\"root\");\n// div.style.width=\"100px\";\n// div.style.height=\"200px\";\n// div.style.background=\"red\";\ndiv.className = \"active\";\n*/\n\n/*\n3.offsetLeft、offsetWidth 等都会引起回流\nconsole.log(div.offsetLeft);\nvar wid = div.offsetWidth;\nsetInterval(()=>{\n    wid += 1;\n    div.style.width =wid + \"px\";\n},1000)\n*/\n//4.\n\n\n\n\n\nReactDOM.render(\n    <Todolist/>,document.getElementById(\"root\")\n)"],"sourceRoot":""}